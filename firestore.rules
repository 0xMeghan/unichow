rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isAdmin() {
      return isAuthenticated() && (
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true ||
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin'
      );
    }
    
    function isSuperAdmin() {
      return isAuthenticated() && (
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'superadmin'
      );
    }
    
    function isValidUserData(data) {
      return data.keys().hasAll([
        'email', 
        'firstName', 
        'lastName', 
        'userType'
      ]) &&
      data.email is string && 
      data.email.matches('^[^@]+@[^@]+\\.[^@]+$') &&  // Basic email validation
      data.firstName is string && 
      data.firstName.size() > 0 &&
      data.lastName is string && 
      data.lastName.size() > 0 &&
      data.userType in ['admin', 'user', 'restaurant'] &&
      (data.phone == null || (data.phone is string && data.phone.matches('^\\+?[1-9]\\d{1,14}$'))) &&
      (data.address == null || (data.address is string && data.address.size() > 0)) &&
      (data.role == null || data.role in ['superadmin', 'admin', 'user']) &&
      (data.isAdmin == null || data.isAdmin is bool) &&
      (data.status == null || data.status in ['active', 'suspended', 'inactive']) &&
      (data.permissions == null || (data.permissions is list && data.permissions.size() <= 20));
    }

    function isValidAdminData(data) {
      return isValidUserData(data) &&
        data.userType == 'admin' &&
        data.role in ['admin', 'superadmin'] &&
        data.isAdmin == true &&
        data.status in ['active', 'suspended', 'inactive'] &&
        data.permissions is list &&
        data.createdAt is string &&
        data.lastUpdated is string;
    }

    function hasValidTimestamps(data) {
      return data.createdAt is string &&
             data.createdAt.matches('^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z$') &&
             data.lastUpdated is string &&
             data.lastUpdated.matches('^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z$');
    }

    // Users collection
    match /users/{userId} {
      // Allow read if user is accessing their own data or is an admin
      allow read: if isAuthenticated() && (
        request.auth.uid == userId ||
        isAdmin()
      );

      // Allow create for regular users or superadmins creating admins
      allow create: if isAuthenticated() && (
        (isValidUserData(request.resource.data) && !request.resource.data.isAdmin) ||
        (isValidAdminData(request.resource.data) && isSuperAdmin() && hasValidTimestamps(request.resource.data))
      );

      // Allow updates based on role and permissions
      allow update: if isAuthenticated() && (
        // Users can update their own non-admin data
        (request.auth.uid == userId && 
         !request.resource.data.isAdmin && 
         !request.resource.data.diff(resource.data).affectedKeys()
           .hasAny(['role', 'isAdmin', 'permissions', 'createdAt'])) ||
        // Admins can update user data but not roles or admin status
        (isAdmin() && 
         !request.resource.data.diff(resource.data).affectedKeys()
           .hasAny(['role', 'isAdmin', 'createdAt']) &&
         hasValidTimestamps(request.resource.data)) ||
        // SuperAdmins can update everything except creation timestamp
        (isSuperAdmin() &&
         !request.resource.data.diff(resource.data).affectedKeys().hasAny(['createdAt']) &&
         hasValidTimestamps(request.resource.data))
      );

      // Only superadmins can delete users
      allow delete: if isSuperAdmin();
    }

    // Audit logs for admin actions
    match /audit_logs/{logId} {
      allow read: if isAdmin();
      allow create: if isAuthenticated() && (
        isAdmin() ||
        isSuperAdmin()
      ) && request.resource.data.keys().hasAll([
        'action',
        'performedBy',
        'timestamp',
        'details'
      ]) && hasValidTimestamps(request.resource.data);
      allow update, delete: if false; // Audit logs should be immutable
    }

    // System settings accessible only by superadmins
    match /system_settings/{settingId} {
      allow read: if isAdmin();
      allow write: if isSuperAdmin() && hasValidTimestamps(request.resource.data);
    }

    // Rest of your collections...
    match /restaurants/{restaurantId} {
      allow read: if true;
      allow create: if isAuthenticated() && hasValidTimestamps(request.resource.data);
      allow update: if isAuthenticated() && (
        request.auth.uid == restaurantId || 
        isAdmin()
      ) && hasValidTimestamps(request.resource.data);
      allow delete: if isAdmin();

      match /ratings/{ratingId} {
        allow read: if true;
        allow create: if isAuthenticated() && hasValidTimestamps(request.resource.data);
        allow update: if isAdmin() && hasValidTimestamps(request.resource.data);
        allow delete: if isAdmin();
      }

      match /menu/{itemId} {
        allow read: if true;
        allow write: if (request.auth.uid == restaurantId || isAdmin()) && 
          hasValidTimestamps(request.resource.data);
      }
    }

    match /orders/{orderId} {
      allow read: if isAuthenticated() && (
        request.auth.uid == resource.data.userId ||
        request.auth.uid == resource.data.restaurantId ||
        isAdmin()
      );
      allow create: if isAuthenticated() && hasValidTimestamps(request.resource.data);
      allow update: if isAuthenticated() && (
        request.auth.uid == resource.data.restaurantId ||
        isAdmin()
      ) && hasValidTimestamps(request.resource.data);
      allow delete: if isAdmin();
    }

    match /system_errors/{errorId} {
      allow read: if isAdmin();
      allow create: if isAuthenticated() && hasValidTimestamps(request.resource.data);
      allow update, delete: if isAdmin();
    }

    match /notifications/{notificationId} {
      allow read: if isAuthenticated() && (
        request.auth.uid == resource.data.userId ||
        isAdmin()
      );
      allow create: if isAdmin() && hasValidTimestamps(request.resource.data);
      allow update: if isAuthenticated() && 
        request.auth.uid == resource.data.userId &&
        hasValidTimestamps(request.resource.data);
      allow delete: if isAdmin();
    }

    match /verification/{docId} {
      allow read: if isAuthenticated() && (
        request.auth.uid == resource.data.restaurantId ||
        isAdmin()
      );
      allow create: if isAuthenticated() && hasValidTimestamps(request.resource.data);
      allow update: if isAdmin() && hasValidTimestamps(request.resource.data);
      allow delete: if isAdmin();
    }
  }
}