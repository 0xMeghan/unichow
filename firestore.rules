rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isAdmin() {
      return isAuthenticated() && (
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true ||
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin'
      );
    }
    
    function isSuperAdmin() {
      return isAuthenticated() && (
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'superadmin'
      );
    }

    function isRestaurantOwner(restaurantId) {
      return isAuthenticated() && 
        request.auth.uid == restaurantId &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.userType == 'restaurant';
    }

    function isCustomer() {
      return isAuthenticated() && 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.userType == 'customer';
    }

    function hasValidTimestamps(data) {
      return data.createdAt is string &&
             data.lastUpdated is string;
    }

    function isValidReview() {
      return request.resource.data.keys().hasAll(['rating', 'comment']) &&
        request.resource.data.rating is number &&
        request.resource.data.rating >= 1 &&
        request.resource.data.rating <= 5 &&
        request.resource.data.comment is string;
    }

    function isValidRestaurantData() {
      return request.resource.data.keys().hasAll(['restaurantName', 'email', 'phone']) &&
        request.resource.data.restaurantName is string &&
        request.resource.data.email is string &&
        request.resource.data.phone is string;
    }

    // Users collection
    match /users/{userId} {
      allow read: if isAuthenticated() && (
        request.auth.uid == userId ||
        isAdmin() ||
        isSuperAdmin()
      );
      
      // Allow superadmin to create admin users
      allow create: if 
        (isSuperAdmin() && 
        request.resource.data.keys().hasAll(['email', 'firstName', 'lastName', 'phone', 'role', 'isAdmin']) &&
        request.resource.data.role in ['admin', 'superadmin']) || 
        (
          request.auth != null && 
          (
            request.auth.uid == userId || 
            (
              isSuperAdmin() && 
              exists(/databases/$(database)/documents/users/$(request.auth.uid))
            )
          )
        );
      
      allow update: if 
        isSuperAdmin() || 
        (isAuthenticated() && request.auth.uid == userId && (
          // Allow users to update their own basic info
          request.resource.data.diff(resource.data).affectedKeys()
            .hasOnly(['emailVerified', 'lastUpdated']) ||
          // Or allow full updates if they're the owner
          request.auth.uid == userId
        ));
        
      allow delete: if isSuperAdmin();
    }

    // Restaurants collection
    match /restaurants/{restaurantId} {
      allow read: if true;
      allow create: if isRestaurantOwner(restaurantId) && isValidRestaurantData();
      allow update: if isAuthenticated() && (
        isRestaurantOwner(restaurantId) ||
        isAdmin()
      );
      allow delete: if isSuperAdmin();

      // Menu subcollection
      match /menu/{itemId} {
        allow read: if true;
        allow write: if isAuthenticated() && (
          isRestaurantOwner(restaurantId) ||
          isAdmin()
        );
      }

      // Reviews subcollection
      match /reviews/{reviewId} {
        allow read: if true;
        allow create: if isCustomer() && 
          exists(/databases/$(database)/documents/orders/{orderId}) &&
          get(/databases/$(database)/documents/orders/{orderId}).data.customerId == request.auth.uid &&
          get(/databases/$(database)/documents/orders/{orderId}).data.restaurantId == restaurantId &&
          isValidReview();
        allow update, delete: if isAdmin();
      }
      
      // Verification subcollection
      match /verification/{verificationDoc} {
        allow read: if isAuthenticated() && (
          isRestaurantOwner(restaurantId) ||
          isAdmin()
        );
        allow create: if isRestaurantOwner(restaurantId);
        allow update: if isAdmin() || (
          isRestaurantOwner(restaurantId) && 
          request.resource.data.diff(resource.data).affectedKeys()
            .hasOnly(['status', 'lastUpdated'])
        );
        allow delete: if isAdmin();

        // Allow status document operations
        match /status {
          allow read: if isAuthenticated() && (
            isRestaurantOwner(restaurantId) ||
            isAdmin()
          );
          allow write: if isAdmin();
        }
      }
    }

    // Orders collection
    match /orders/{orderId} {
      allow read: if isAuthenticated() && (
        request.auth.uid == resource.data.customerId ||
        request.auth.uid == resource.data.restaurantId ||
        isAdmin()
      );
      allow create: if isAuthenticated() && 
        request.auth.uid == request.resource.data.customerId &&
        hasValidTimestamps(request.resource.data);
      allow update: if isAuthenticated() && (
        request.auth.uid == resource.data.restaurantId ||
        isAdmin()
      );
      allow delete: if isAdmin();
    }

    // System collections (admin only)
    match /{path=**}/system_errors/{docId} {
      allow read, write: if isAdmin();
    }
    
    match /{path=**}/audit_logs/{docId} {
      allow read: if isAdmin();
      allow create: if isAuthenticated();
      allow update, delete: if false;
    }

    // Root-level verification documents
    match /verification/{docId} {
      allow read: if isAuthenticated() && (
        request.auth.uid == resource.data.restaurantId ||
        isAdmin()
      );
      allow create: if isRestaurantOwner(request.resource.data.restaurantId);
      allow update: if isAdmin() || (
        isRestaurantOwner(resource.data.restaurantId) && 
        request.resource.data.diff(resource.data).affectedKeys()
          .hasOnly(['status', 'lastUpdated'])
      );
      allow delete: if isAdmin();
    }

    // Customer favorites subcollection
    match /customers/{customerId}/favorites/{restaurantId} {
      allow read: if isAuthenticated() && (
        request.auth.uid == customerId ||
        isAdmin()
      );
      allow write: if isAuthenticated() && request.auth.uid == customerId;
    }

    // Admin Settings Collection
    match /admin/settings {
      allow read: if isAdmin();
      allow write: if isSuperAdmin();
      
      match /{document=**} {
        allow read: if isAdmin();
        allow write: if isSuperAdmin();
      }
    }

    // Admin Analytics Collection
    match /admin/analytics {
      allow read: if isSuperAdmin();
      allow write: if false;  // Analytics should only be written by system
      
      match /metrics/{metricId} {
        allow read: if isSuperAdmin();
        allow write: if false;
      }
      
      match /daily/{date} {
        allow read: if isSuperAdmin();
        allow write: if false;
      }
      
      match /restaurants/{restaurantId} {
        allow read: if isSuperAdmin();
        allow write: if false;
      }
    }

    // Restaurant verification subcollection
    match /restaurants/{restaurantId}/verification/{verificationDoc} {
      allow read: if isAuthenticated() && (
        isRestaurantOwner(restaurantId) ||
        isAdmin()
      );
      allow create: if isRestaurantOwner(restaurantId);
      allow update, write: if isAdmin() || isRestaurantOwner(restaurantId);
      allow delete: if isAdmin();

      // Allow status document operations
      match /status {
        allow read: if isAuthenticated() && (
          isRestaurantOwner(restaurantId) ||
          isAdmin()
        );
        allow write, update: if isAdmin() || isRestaurantOwner(restaurantId);
      }
    }
  }
}